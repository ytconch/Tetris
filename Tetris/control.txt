// 旋轉矩陣
void rotateList(int ori[4][4], int out[4][4], int n)
{
    // 复制 ori 到 out，避免影响原始数据
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            out[i][j] = ori[i][j]; // 初始化 out 为 ori 的初始值
        }
    }

    // 旋转 n 次
    for (int na = 0; na < n; na++)
    {
        // 先进行转置并反转列
        int temp[4][4]; // 临时数组，用于存储旋转后的结果

        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                temp[j][3 - i] = out[i][j]; // 转置并反转列
            }
        }

        // 将临时数组的结果复制到 out
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                out[i][j] = temp[i][j]; // 更新 out 为旋转后的结果
            }
        }
    }
}
// 陣列歸位
void moveShapeToTopLeft(int matrix[4][4])
{
    int rows = 4, cols = 4;

    // 找到非零值的邊界
    int top = rows, bottom = -1, left = cols, right = -1;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            if (matrix[i][j] != 0)
            {
                if (i < top)
                    top = i; // 更新上邊界
                if (i > bottom)
                    bottom = i; // 更新下邊界
                if (j < left)
                    left = j; // 更新左邊界
                if (j > right)
                    right = j; // 更新右邊界
            }
        }
    }

    // 創建一個新矩陣
    int newMatrix[4][4] = { 0 };

    // 將非零元素移到左上角
    int newRow = 0, newCol = 0;
    for (int i = top; i <= bottom; i++)
    {
        newCol = 0; // 重置列索引
        for (int j = left; j <= right; j++)
        {
            newMatrix[newRow][newCol] = matrix[i][j];
            newCol++;
        }
        newRow++;
    }

    // 將新矩陣的內容覆蓋回原矩陣
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            matrix[i][j] = newMatrix[i][j];
        }
    }
}
//陣列相同
bool arelistSame(int a[4][4], int b[4][4])
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (a[i][j] != b[i][j])
            {
                return false; // 如果有任何一個元素不同，返回false
            }
        }
    }
    return true; // 所有元素都相同，返回true
}
// 陣列移動
void ListMove(int matrix[4][4], int direction, int steps)
{
    for (int n = 0; n < steps; n++)
    {
        if (direction == 1)
        {
            for (int i = 0; i < 4; i++)
            {
                if (matrix[i][3] != 0)
                    return;
            }
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 3; ia >= 0; ia--)
                {
                    if (matrix[i][ia] == 1)
                    {
                        matrix[i][ia] = 0;
                        matrix[i][ia + 1] = 1;
                    }
                }
            }
        }
        if (direction == -1)
        {
            for (int i = 0; i < 4; i++)
            {
                if (matrix[i][0] != 0)
                    return;
            }
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 0; ia < 4; ia++)
                {
                    if (matrix[i][ia] == 1)
                    {
                        matrix[i][ia] = 0;
                        matrix[i][ia - 1] = 1;
                    }
                }
            }
        }
    }
}
// runblock匯入tetrisblock
void runBlockReCheckToTetris()
{
    for (int i = 0; i < 20; i++)
    {
        for (int ia = 0; ia < 10; ia++)
        {
            if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] == 1 && RunBlock[i][ia] == 1)
            {
                End = true;
            }
            else if (TetrisBlock[i][ia] == 0 && checkTetrisBlock[i][ia] == 0 && RunBlock[i][ia] == 1)
            {
                TetrisBlock[i][ia] = 1;
            }
        }
    }
}
// 隨機方塊選取
void RandomBlock()
{
    int type = RandomBlockSave;
    // runblock初始化
    for (int i = 0; i < 20; i++)
    {
        for (int ia = 0; ia < 10; ia++)
        {
            RunBlock[i][ia] = 0;
        }
    }
    // blockC導入runblock
    for (int i = 0; i < 2; i++)
    {
        for (int ia = 0; ia < 4; ia++)
        {
            RunBlock[i][3 + ia] = blockC[type][i][ia];
        }
    }
    RandomBlockSave = RandomNumber(0, 6);
    runBlockReCheckToTetris();
}
// runblock更新
void RunBlockRe()
{
    for (int i = 0; i < 20; i++)
    {
        for (int ia = 0; ia < 10; ia++)
        {
            if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1)
            {
                RunBlock[i][ia] = 1;
            }
            else if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] == 1)
            {
                RunBlock[i][ia] = 2;
            }
            else if (TetrisBlock[i][ia] == 0)
            {
                RunBlock[i][ia] = 0;
            }
        }
    }
}
// 轉動
void rotateBlock(int type)
{
    int BlockPOS[4] = { 20, 0, 0, 10 }; // 上、下、右、左初始值
    for (int n = 0; n < 20; n++)
    {
        for (int na = 0; na < 10; na++)
        {
            if (RunBlock[n][na] == 1)
            {
                if (n < BlockPOS[0])
                    BlockPOS[0] = n; // 上
                if (n > BlockPOS[1])
                    BlockPOS[1] = n; // 下
                if (na > BlockPOS[2])
                    BlockPOS[2] = na; // 右
                if (na < BlockPOS[3])
                    BlockPOS[3] = na; // 左
            }
        }
    }
    if (BlockType == 1)
        return;

    // 轉動方向與獲取範圍定義
    int GetBlock[4][4] = { 0 }, rotateBlock[4][4] = { 0 }, Bblock[4][4] = { 0 }, TetrisSave[16][2] = { -1 };
    int rotateType = 0;
    if (type == 2)
    {
        if (BlockPOS[2] == 9)
        {
            rotateType = 2;
        }
        else
        {
            rotateType = 1;
        }
    }
    else if (type == 1)
    {
        if (BlockPOS[3] == 0)
        {
            rotateType = 1;
        }
        else
        {
            rotateType = 2;
        }
    }
    int tetrisSaveCount = 0;
    int inPutTetrisPos[3] = { -1 };
    // 極限位置校準後填入限制表格 -- 並且旋轉表格
    if (rotateType == 0)
        return;
    if (rotateType == 1)
    {
        // 由左至右
        // 基準點匯入
        inPutTetrisPos[0] = BlockPOS[0];
        inPutTetrisPos[1] = BlockPOS[3];
        inPutTetrisPos[2] = 2;
        for (int Ly = 0; Ly <= 3; Ly++)
        {
            for (int Lx = 0; Lx <= 3; Lx++)
            {
                if (BlockPOS[0] + Ly < 20 && BlockPOS[3] + Lx <= 9)
                {
                    if (RunBlock[BlockPOS[0] + Ly][BlockPOS[3] + Lx] == 1)
                    {
                        GetBlock[Ly][Lx] = 1;
                        // tetris 原生方格獲取
                        TetrisSave[tetrisSaveCount][0] = BlockPOS[0] + Ly;
                        TetrisSave[tetrisSaveCount][1] = BlockPOS[3] + Lx;
                        tetrisSaveCount++;
                    }
                    if (RunBlock[BlockPOS[0] + Ly][BlockPOS[3] + Lx] == 2)
                    {
                        Bblock[Ly][Lx] = 1;
                    }
                }
            }
        }
        // 旋轉
        rotateList(GetBlock, rotateBlock, 1);
        // 歸位
        moveShapeToTopLeft(rotateBlock);
    }
    if (rotateType == 2)
    {
        // 邊界偵測

        // 由右至左
        // 基準點匯入
        inPutTetrisPos[0] = BlockPOS[0];
        inPutTetrisPos[1] = BlockPOS[2];
        inPutTetrisPos[2] = 1;
        for (int Ly = 0; Ly <= 3; Ly++)
        {
            for (int Lx = 0; Lx <= 3; Lx++)
            {
                if (BlockPOS[0] + Ly < 20 && BlockPOS[2] - Lx >= 0)
                {
                    if (RunBlock[BlockPOS[0] + Ly][BlockPOS[2] - Lx] == 1)
                    {
                        GetBlock[Ly][3 - Lx] = 1;
                        // tetris 原生方格獲取
                        TetrisSave[tetrisSaveCount][0] = BlockPOS[0] + Ly;
                        TetrisSave[tetrisSaveCount][1] = BlockPOS[2] - Lx;
                        tetrisSaveCount++;
                    }
                    if (RunBlock[BlockPOS[0] + Ly][BlockPOS[2] - Lx] == 2)
                    {
                        Bblock[Ly][3 - Lx] = 1;
                    }
                }
            }
        }
        // 旋轉
        rotateList(GetBlock, rotateBlock, 3);
        // 歸位
        moveShapeToTopLeft(rotateBlock);
        // 校準
        ListMove(rotateBlock, 1, 3);
    }
    // 阻擋方塊核對
    bool canRotate = false;
    for (int n = 0; n < 4; n++)
    {
        if (canRotate == false)
        {
            bool Acheck = true;
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 0; ia < 4; ia++)
                {
                    if (Bblock[i][ia] == 1 && rotateBlock[i][ia] == 1)
                    {
                        Acheck = false;
                    }
                }
            }
            if (Acheck == true)
            {
                canRotate = true;
            }
            else
            {
                if (type == 1)
                    ListMove(rotateBlock, 1, 1);
                if (type == 2)
                    ListMove(rotateBlock, -1, 1);
            }
        }
        else
        {
            break;
        }
    }
    // 核對確認
    if (!canRotate)
        return;
    if (canRotate)
    {
        //   writeFileAsync("consloe.txt", "[TETRIS] rotateBlock " + inPutTetrisPos[2]);
        int DefCheck = 0;
        // 錯誤防護
        if (inPutTetrisPos[2] == 2)
        {
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 0; ia < 4; ia++)
                {
                    // 邊界判斷
                    if (inPutTetrisPos[0] + i < 20 && inPutTetrisPos[1] + ia < 10)
                    {
                        if (rotateBlock[i][ia] == 1)
                        {
                            DefCheck++;
                        }
                    }
                }
            }
        }
        if (inPutTetrisPos[2] == 1)
        {
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 3; ia >= 0; ia--)
                {
                    // 邊界判斷
                    if (inPutTetrisPos[0] + i < 20 && inPutTetrisPos[1] - ia >= 0)
                    {
                        if (rotateBlock[i][3 - ia] == 1)
                        {
                            DefCheck++;
                        }
                    }
                }
            }
        }
        if (DefCheck != tetrisSaveCount)
            return;
        // 原生方塊刪除
        for (int i = 0; i < 16; i++)
        {
            if (TetrisSave[i][0] != -1 && TetrisSave[i][1] != -1)
            {
                TetrisBlock[TetrisSave[i][0]][TetrisSave[i][1]] = 0;
            }
        }
        // 後生方塊填入
        // 基準點核查
        if (inPutTetrisPos[2] == 2)
        {
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 0; ia < 4; ia++)
                {
                    // 邊界判斷
                    if (inPutTetrisPos[0] + i < 20 && inPutTetrisPos[1] + ia < 10)
                    {
                        // 陣列數據判斷
                        if (rotateBlock[i][ia] == 1)
                        {
                            TetrisBlock[inPutTetrisPos[0] + i][inPutTetrisPos[1] + ia] = 1;
                        }
                    }
                }
            }
        }
        if (inPutTetrisPos[2] == 1)
        {
            for (int i = 0; i < 4; i++)
            {
                for (int ia = 3; ia >= 0; ia--)
                {
                    // 邊界判斷
                    if (inPutTetrisPos[0] + i < 20 && inPutTetrisPos[1] - ia >= 0)
                    {
                        // 陣列數據判斷
                        if (rotateBlock[i][3 - ia] == 1)
                        {
                            TetrisBlock[inPutTetrisPos[0] + i][inPutTetrisPos[1] - ia] = 1;
                        }
                    }
                }
            }
        }
    }
}
// 向右移動
void moveRight()
{
    bool canMove = true;
    for (int i = 0; i < 20; i++)
    {
        for (int ia = 9; ia >= 0; ia--)
        {
            if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1)
            {
                // 是否為邊界判斷
                if (ia == 9)
                {
                    canMove = false;
                }
                // 是否受到卡頓
                if (TetrisBlock[i][ia] == TetrisBlock[i][ia + 1] && TetrisBlock[i][ia + 1] == checkTetrisBlock[i][ia + 1])
                {
                    canMove = false;
                }
            }
        }
    }
    if (canMove == true)
    {
        //writeFileAsync("consloe.txt", "[TETRIS] moveRightBlock ");
        for (int i = 0; i < 20; i++)
        {
            for (int ia = 8; ia >= 0; ia--)
            {
                if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1)
                {
                    // 顯示更新
                    TetrisBlock[i][ia] = 0;
                    TetrisBlock[i][ia + 1] = 1;
                }
            }
        }
    }
}
// 向左移動
void moveLeft()
{
    bool canMove = true;
    for (int i = 0; i < 20; i++)
    {
        for (int ia = 0; ia < 10; ia++)
        {
            if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1)
            {
                // 是否為邊界判斷
                if (ia == 0)
                {
                    canMove = false;
                }
                // 是否受到卡頓
                if (TetrisBlock[i][ia] == TetrisBlock[i][ia - 1] && TetrisBlock[i][ia - 1] == checkTetrisBlock[i][ia - 1])
                {
                    canMove = false;
                }
            }
        }
    }
    // 換位
    if (canMove == true)
    {
        //writeFileAsync("consloe.txt", "[TETRIS] moveLeftBlock ");
        for (int i = 0; i < 20; i++)
        {
            for (int ia = 1; ia < 10; ia++)
            {
                if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1)
                {
                    TetrisBlock[i][ia] = 0;
                    TetrisBlock[i][ia - 1] = 1;
                }
            }
        }
    }
}
void stringRemove()
{
    int stringAmount = 0;
    // 方塊刪除
    for (int i = 0; i < 20; i++)
    {
        int check = 0;
        for (int ia = 0; ia < 10; ia++)
        {
            if (TetrisBlock[i][ia] == 1)
            {
                check++;
            }
        }
        if (check == 10)
        { // 方塊刪除
            for (int ia = 0; ia < 10; ia++)
            {
                TetrisBlock[i][ia] = 0;
                checkTetrisBlock[i][ia] = 0;
            }
            AllString++;
            stringAmount++;
            removeString++;
            // 方塊總體墜落
            for (int ia = i - 1; ia >= 0; ia--)
            {
                for (int ib = 0; ib < 10; ib++)
                {
                    if (TetrisBlock[ia][ib] == 1 && checkTetrisBlock[ia][ib] == 1)
                    {
                        TetrisBlock[ia][ib] = 0;
                        checkTetrisBlock[ia][ib] = 0;
                        TetrisBlock[ia + 1][ib] = 1;
                        checkTetrisBlock[ia + 1][ib] = 1;
                    }
                }
            }
        }
    }
    if (stringAmount >= 1) {
        int stringScore[4] = { 40 , 100 , 300 , 1200 };
        scores += stringScore[stringAmount - 1] * (level + 1);
        if (removeString >= 10) {
            removeString -= 10;
            level++;
        }
    }
    
}
void checkblockIN()
{
    for (int i = 0; i < 20; i++)
    {
        for (int ia = 0; ia < 10; ia++)
        {
            if (TetrisBlock[i][ia] == 1)
            {
                checkTetrisBlock[i][ia] = 1;
            }
        }
    }
    blockSummon = true;
}
// 向下移動
void movedown()
{
    int downcheck = 0;
    bool breakC = false;
    for (int i = 19; i >= 0; i--)
    {
        for (int ia = 0; ia < 10; ia++)
        {
            if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1)
            {
                if (i == 19 || checkTetrisBlock[i + 1][ia] == 1)
                {
                    downcheck = 2;
                    breakC = true;
                }
                else
                {
                    downcheck = 1;
                }
            }
        }
    }
    if (downcheck == 1 && breakC != true)
    {
        //writeFileAsync("consloe.txt", "[TETRIS] moveDwonBlock ");
        for (int i = 19; i >= 0; i--)
        {
            for (int ia = 0; ia < 10; ia++)
            {
                if (TetrisBlock[i][ia] == 1 && checkTetrisBlock[i][ia] != 1 && i != 19)
                {
                    TetrisBlock[i][ia] = 0;
                    TetrisBlock[i + 1][ia] = 1;
                }
            }
        }
    }
    else if (downcheck == 2 || breakC == true)
    {
        if (SdownCheck == 1) {
            SdownCheck = 2;
        }
        checkblockIN();
        stringRemove();
    }
    else if (downcheck == 0)
    {
    }
}