int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow)
{
    static TCHAR szAppName[] = TEXT("俄羅斯方塊");
    HWND hwnd;
    MSG msg;
    WNDCLASS wndclass;

    wndclass.style = CS_HREDRAW | CS_VREDRAW;
    wndclass.lpszClassName = szAppName;
    wndclass.lpszMenuName = NULL;
    wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
    wndclass.lpfnWndProc = WndProc;
    wndclass.cbWndExtra = 0;
    wndclass.cbClsExtra = 0;
    wndclass.hInstance = hInstance;
    wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);

    if (!RegisterClass(&wndclass))
    {
        MessageBox(NULL, TEXT("視窗註冊失敗"), TEXT("ERROR"), MB_OK | MB_ICONERROR);
        return 0;
    }

    hwnd = CreateWindow(
        szAppName,
        TEXT("TETRIS"),
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        (GRID_WIDTH * CELL_SIZE) + BORDER_SIZE * 2 + 432,
        (GRID_HEIGHT * CELL_SIZE) + BORDER_SIZE * 2 + 278,
        NULL,
        NULL,
        hInstance,
        NULL);

    ShowWindow(hwnd, iCmdShow);
    UpdateWindow(hwnd);

    // 啟動定時器
    SetTimer(hwnd, TIMER_ID, TIMER_INTERVAL, NULL);
    //啟動預執行
    std::thread bgThread(run);
    while (GetMessage(&msg, NULL, 0, 0) && End == false)
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    bgThread.detach();
    KillTimer(hwnd, TIMER_ID); // 停止定時器
    //資料存處
    writeFileAsync("Histroy.txt", "====" + getTime() + "====");
    writeFileAsync("Histroy.txt", "[score]" + std::to_string(scores));
    writeFileAsync("Histroy.txt", "[level]" + std::to_string(level));
    writeFileAsync("Histroy.txt", "[time]" + std::to_string(Time));
    writeFileAsync("Histroy.txt", "[string]" + std::to_string(AllString));
    writeFileAsync("Histroy.txt", "============================");
    //遊戲結束
    return msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HDC hdcMem;
    static HBITMAP hBitmap;
    static HBRUSH hBrushYellow;
    static HBRUSH hBrushBlack;
    static RECT clientRect;

    switch (message)
    {
    case WM_CREATE:
        MessageBox(hwnd, TEXT("點擊後遊戲啟動,請準備輸入法"), TEXT("準備"), MB_OK | MB_ICONINFORMATION);
        GetClientRect(hwnd, &clientRect);
        hdcMem = CreateCompatibleDC(NULL); // 創建內存DC
        hBitmap = CreateCompatibleBitmap(GetDC(hwnd), clientRect.right, clientRect.bottom);
        SelectObject(hdcMem, hBitmap);
        hBrushYellow = CreateSolidBrush(RGB(255, 255, 0)); // 初始化黃色畫刷
        hBrushBlack = CreateSolidBrush(RGB(0, 0, 0));      // 初始化黑色畫刷
        return 0;

    case WM_TIMER: // 定時器觸發
        if (End == false) {
            // 使用雙緩衝繪製
            FillRect(hdcMem, &clientRect, (HBRUSH)(COLOR_WINDOW + 1)); // 填充背景色

            // 繪製主格子
            for (int y = 0; y < GRID_HEIGHT; ++y)
            {
                for (int x = 0; x < GRID_WIDTH; ++x)
                {
                    // 計算每個格子的位置
                    int left = 100 + BORDER_SIZE + x * CELL_SIZE;
                    int top = 100 + BORDER_SIZE + y * CELL_SIZE;
                    int right = left + CELL_SIZE;
                    int bottom = top + CELL_SIZE;

                    // 畫格子內部
                    RECT cellRect = { left, top, right, bottom };
                    HBRUSH hBrush = CreateSolidBrush(colors[RunBlock[y][x]]);
                    FillRect(hdcMem, &cellRect, hBrush);
                    DeleteObject(hBrush);

                    // 畫格子的黃色邊框
                    FrameRect(hdcMem, &cellRect, hBrushYellow);
                }
            }

            // 繪製右方的整體長方形
            int offsetX = 100 + BORDER_SIZE + GRID_WIDTH * CELL_SIZE + 50; // 主格子右方 50px 的位置
            int offsetY = 100 + BORDER_SIZE;

            // 計算整體矩形的邊界
            int left = offsetX;
            int top = offsetY;
            int right = offsetX + 6 * CELL_SIZE; // 寬度 6 個單位
            int bottom = offsetY + 20 * CELL_SIZE; // 高度 20 個單位

            // 畫整體矩形的黑色邊框
            RECT outerRect = { left, top, right, bottom };
            FrameRect(hdcMem, &outerRect, hBrushBlack); // 改為黑色邊框

            // 繪製分隔線（水平分割線）
            HPEN hPenBlack = CreatePen(PS_SOLID, 5, RGB(0, 0, 0)); // 黑色筆，5px 寬
            HPEN hOldPen = (HPEN)SelectObject(hdcMem, hPenBlack);

            // 繪製分隔線
            for (int i = 0; i < 2; ++i) {
                int separatorY = top + (4 + i * 5) * CELL_SIZE;
                MoveToEx(hdcMem, left, separatorY, NULL);
                LineTo(hdcMem, right, separatorY);
            }

            // 設置文字屬性
            SetBkMode(hdcMem, TRANSPARENT);
            SetTextColor(hdcMem, RGB(0, 0, 0));

            // 定義文字與對應數值
            struct TextItem {
                const TCHAR* label;
                int* value;
                int lineOffset;
            };
            TextItem items[] = {
                { TEXT("Top Score"), &topScore, 0 },
                { TEXT("Score"), &scores, 2 },
                { TEXT("NextBlock"), nullptr, 8 },
                { TEXT("Level"), &level, 10 },
                { TEXT("Time"), &Time, 12 },
                { TEXT("String"), &AllString, 14 },
                { TEXT("Made by 詹秉睿"), nullptr, 18 }
            };

            // 動態繪製文字與數值
            TCHAR buffer[32];
            for (const auto& item : items) {
                RECT rect = { left, top + item.lineOffset * CELL_SIZE, right, top + (item.lineOffset + 1) * CELL_SIZE };
                DrawText(hdcMem, item.label, -1, &rect, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
                if (item.value) {
                    _stprintf_s(buffer, TEXT("%d"), *item.value);
                    rect.top += CELL_SIZE;
                    rect.bottom += CELL_SIZE;
                    DrawText(hdcMem, buffer, -1, &rect, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
                }
            }


            // 下一個方塊的具體顯示（可以根據遊戲邏輯填充相應數據）
            // Example: 填充一個簡單方塊
            for (int y = 1; y <= 2; y++) // 示範方塊的範圍（僅示範）
            {
                for (int x = 1; x <= 4; x++)
                {
                    if (blockC[RandomBlockSave][y - 1][x - 1] == 1) {
                        int blockLeft = left + x * CELL_SIZE;
                        int blockTop = top + (y + 4) * CELL_SIZE;
                        int blockRight = blockLeft + CELL_SIZE;
                        int blockBottom = blockTop + CELL_SIZE;

                        RECT blockRect = { blockLeft, blockTop, blockRight, blockBottom };
                        HBRUSH hBrushBlock = CreateSolidBrush(RGB(255, 0, 0)); // 填充紅色示例方塊
                        FillRect(hdcMem, &blockRect, hBrushBlock);
                        DeleteObject(hBrushBlock);
                    }
                    
                }
            }

            InvalidateRect(hwnd, NULL, FALSE); // 請求重繪
            return 0;

        }
        
    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        BitBlt(hdc, 0, 0, clientRect.right, clientRect.bottom, hdcMem, 0, 0, SRCCOPY); // 將內存DC的內容繪製到窗口DC
        EndPaint(hwnd, &ps);
        return 0;
    }
    case WM_KEYDOWN: // 鍵盤按下訊息
        if (!KeyList[wParam]) // 如果按鍵未被記錄為按下
        {
            //writeFileAsync("consloe.txt", "[EXECUTE] KEY " + std::to_string(wParam) + " check");
            if (wParam == 'Q') {
                rotateBlock(1);
                RunBlockRe();
            }
            if (wParam == 'E') {
                rotateBlock(2);
                RunBlockRe();
            }
            if (wParam == 'A') {
                moveLeft();
                RunBlockRe();
            }
            if (wParam == 'S') {
                movedown();
                RunBlockRe();
            }
            if (wParam == 'D') {
                moveRight();
                RunBlockRe();
            }
            if (wParam == ' ') {
                //強降
                if (SdownCheck == 0) {
                    SdownCheck = 1;
                    while (SdownCheck == 1) {
                        movedown();
                        RunBlockRe();
                    }
                    SdownCheck = 0;
                }
                
            }
        }
        return 0;

    case WM_KEYUP: // 鍵盤放開訊息
        KeyList[wParam] = false; // 設置按鍵為未按下
        return 0;

    case WM_DESTROY:
        DeleteObject(hBitmap);
        DeleteObject(hBrushYellow);
        DeleteDC(hdcMem);
        PostQuitMessage(0);
        return 0;
    }

    return DefWindowProc(hwnd, message, wParam, lParam);
}